[project]
name = "scicheck"
version = "0.1"
description = "Input validation for scientific codes"
license = "TBD"
# readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Jonathan King", email = "jking@usgs.gov"},
]
maintainers = [
    {name = "Jonathan King", email = "jking@usgs.gov"},
]
keywords = ["validation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: TBD",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development"
]

# [project.urls]
# repository = "TBD"
# documentation = "TBD"


#####
# Poetry / Dev dependencies
#####

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
packages = [
    { include = "scicheck" },
]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Dev tasks
poethepoet = "*"

# Formatting
black = ">=24.3.0"
isort = ">=5.12.0"

# Testing
pip-audit = "*"
pytest = "*"
pytest-cov = "*"
coverage = "*"

# Deploy
twine = "*"

# Docs
sphinx = ">=7.2.6"
furo = "*"
sphinx_design = ">=0.5"
sphinx-copybutton = "*"

#####
# Dev tool configurations
######

[tool.coverage.report]
exclude_also = [
    "if typing.TYPE_CHECKING",
]

[tool.isort]
profile = "black"

#####
# Developer Scripts
#####

##### Utils

[tool.poe.tasks._rmtree]
help = "Deletes a folder and its contents"
expr = "shutil.rmtree(sys.argv[1]) if pathlib.Path(sys.argv[1]).exists() else None"
imports = ["shutil", "pathlib"]

[tool.poe.tasks._delete]
help = "Deletes a file"
expr = "pathlib.Path(sys.argv[1]).unlink() if pathlib.Path(sys.argv[1]).exists() else None"
imports = ["pathlib"]

[tool.poe.tasks._open]
help = "Opens an HTML index page in a browser"
expr = "webbrowser.open(pathlib.Path.cwd() / sys.argv[1] / 'index.html')"
imports = ["webbrowser", "pathlib"]


##### Dependencies: Vulnerabilities, Lock

[tool.poe.tasks.audit]
help = "Checks package dependencies for security issues"
cmd = "pip-audit"

[tool.poe.tasks.update]
help = "Deletes poetry.lock and reinstalls the project"
sequence = [
  {ref = "_delete poetry.lock" },
  {cmd = "poetry install --all-groups --all-extras" },
]


##### Formatting

[tool.poe.tasks.format]
help = "Applies black and isort to scicheck and its tests"
sequence = ["isort scicheck", "isort tests", "black scicheck", "black tests"]
default_item_type = "cmd"

[tool.poe.tasks.lint]
help = "Requires scicheck and its tests to be properly formatted"
sequence = [
  "isort scicheck --check", 
  "isort tests --check", 
  "black scicheck --check", 
  "black tests --check",
]
default_item_type = "cmd"


##### Testing and test coverage

[tool.poe.tasks.tests]
help = "Runs the tests and requires 100% coverage"
sequence = [
  { cmd = "pytest tests --cov=scicheck --cov=tests --cov-fail-under=100 --cov-report xml:coverage.xml" },
  { ref = "coverage" },
]

[tool.poe.tasks.coverage]
help = "Prints the coverage report for the tests"
cmd = "coverage report"

[tool.poe.tasks.htmlcov]
help = "Builds an HTML coverage report and opens in browser"
sequence = [
  { ref = "_rmtree htmlcov" },
  { cmd = "coverage html --skip-covered" },
  { ref = "_open htmlcov" },
]


##### Docs

[tool.poe.tasks.docs]
help = "Deletes and then rebuilds the documentation"
sequence = [
  { ref = "_rmtree public" },
  { cmd = "sphinx-build -qa docs public" },
]

[tool.poe.tasks.open-docs]
help = "Opens the docs in a webbrowser"
ref = "_open public"
